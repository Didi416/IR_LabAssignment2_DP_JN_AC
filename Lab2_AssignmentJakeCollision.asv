classdef Lab2_AssignmentAngie < handle
    
    properties (Access = private)
        lab2GuiApp  % Instance of Lab2_GUI
    end
    
    properties (Constant)
        estopStatus = 'Run'; % Initialize to 'Run'
    end
    
    properties
        robot1 % Instance of the first robot
        robot2 % Instance of the second robot
    end
    
    %% Constructor
    methods
        function self = Lab2_AssignmentAngie 
            clc
            clf
            % Create an instance of Lab2_GUI
            self.lab2GuiApp = Lab2_GUI();
            Environment_Lab2Angie();
            self.initialiseRobots();
            input('Press enter to start');
            %self.objectLocater();
            self.beansCollider();
        end
    end

    %% Public methods
    methods
        function startApp(self)
            % Start the Lab2_GUI app
            self.lab2GuiApp.UIFigure.Visible = 'on';
        end
    end
    
    %% E-stop
    methods (Static)
        % Method to toggle E-stop status
        function toggleEstop(estopStatus)
            % Toggle the E-stop status between 'Run' and 'Stop'
            if strcmp(estopStatus, 'Run')
                estopStatus = 'Run';
            else
                estopStatus = 'Stop';
            end
        end
    end
    
    %% Defined positions of Groceries
    methods
        function initialiseRobots(self)
            % Initialise robot instances
            self.robot1 = LinearUR10;
            self.robot2 = Robo;
        end

        function objectLocater(self)
            % This function defines positions and initiates robot movement

            % Pick item from cupboard
            pickUps1 = [-1.4, -0.2, 1.29; 
                        -1.4, -0.2, 1.0;
                        -1.4, 1.0, 1.0;
                        -1.35, -0.2, 0.47;
                        -1.35, 1.0, 0.47;
                        -1.35, 0.45, 0.2];
      
            % Give to the robot 2
            endPos1 = [-0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2];

            % Pick up from robot 1
            pickUps2 = [-0.5, 1.5, 0.8;
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8];
               
            % Give to user 
            endPos2 = [0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9];

             %%% Mesh 1 
            % Y = ones(8,10)
            % Y = Y*-0.45
            % z = 0:(1/12):0.75
            % x = -2:0.1:-1.3
            % [Z,X] = meshgrid(z,x)
            % oneSideOfCube_h = surf(X,Y,Z);
            % cubePoints = [X(:),Y(:),Z(:)];
            % 
            % cubeAtOigin_h = plot3(cubePoints(:,1),cubePoints(:,2),cubePoints(:,3));
     
            % Mesh 2
            Y2 = ones(8,10)
            Y2 = Y2*0.1
            z2 = 0:(1/12):0.75
            x2 = -2:0.1:-1.3
            [Z2,X2] = meshgrid(z2,x2)
            twoSideOfCube_h = surf(X2,Y2,Z2);
            cubePoints2 = [X2(:),Y2(:),Z2(:)];

            cubeAtOigin_h2 = plot3(cubePoints2(:,1),cubePoints2(:,2),cubePoints2(:,3));

            % Mesh 3
            Z3 = ones(10,10)
            Z3 = Z3*0.45
            y3 = -0.45:(11/180):0.1
            x3 = -2:(7/90):-1.3
            [Y3,X3] = meshgrid(y3,x3)
            threeSideOfCube_h = surf(X3,Y3,Z3);
            cubePoints3 = [X3(:),Y3(:),Z3(:)];

            cubeAtOigin_h3 = plot3(cubePoints3(:,1),cubePoints3(:,2),cubePoints3(:,3));

            % Mesh 4
            Z4 = ones(10,10)
            Z4 = Z4*0.75
            y4 = -0.45:(11/180):0.1
            x4 = -2:(7/90):-1.3
            [Y4,X4] = meshgrid(y4,x4)
            fourSideOfCube_h = surf(X4,Y4,Z4);
            cubePoints4 = [X4(:),Y4(:),Z4(:)];

            cubeAtOigin_h4 = plot3(cubePoints4(:,1),cubePoints4(:,2),cubePoints4(:,3));
          
            
            parfor i = 1:size(endPos1, 1)
                endPosition = endPos1(i, :);
                hold = pickUps1(i, :);
                self.robot1Rotato(endPosition, hold, self.robot1);
            end
            
            parfor i = 1:size(endPos2, 1)
                endPosition2 = endPos2(i,:);
                hold2 = pickUps2(i,:);
                self.robot2Rotato(endPosition2, hold2, self.robot2);
            end

            input('Press enter to end operation');
        end

        %% Movement of robot 1
        function robot1Rotato(self, endPosition, hold, robot1)
            
            %% Check E-stop status before allowing movement
            if strcmp(self.estopStatus, 'Stop')
                disp('E-stop is activated. Robot will not move.');
                return; % Exit the function without moving
            end
            
           
            numSteps = 100;
            
            endTransform = transl(hold) * trotx(pi)
            elbowAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
            qEnd = self.robot1.model.ikcon(endTransform, elbowAngles);

            for loop = 1:1
                qCurrent = self.robot1.model.getpos();
                plotTraj = jtraj(qCurrent, qEnd, numSteps);

                for i = 1:min(size(plotTraj, 1), numSteps)
                    self.robot1.model.animate(plotTraj(i, :));

                end

                qCurrent = self.robot1.model.getpos();
                endTransform = transl(endPosition) * trotx(pi);
                elbowEndAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
                BrickEnd = self.robot1.model.ikcon(endTransform, elbowEndAngles);
                plotTrajEnd = jtraj(qCurrent, BrickEnd, numSteps);

                for i = 1:numSteps
                    currentTransform = self.robot1.model.fkine(plotTrajEnd(i, :)).T;
                    self.robot1.model.animate(plotTrajEnd(i, :));
                    pause(0.01);
                end
            end
        end

        function robot2Rotato(self, endPosition2, hold2, robot2)
           
            % This method moves the robot and picks up items
            % Check E-stop status before allowing movement
            %{
            if strcmp(self.estopStatus, 'Stop')
                disp('E-stop is activated. Robot will not move.');
                return; % Exit the function without moving
            end
            %}
            numSteps = 100;
            
            endTransform = transl(hold2) * trotx(pi);
            elbowAngles = deg2rad([0, -40, 50, -60, -90, 0]);
            qEnd = self.robot2.model.ikcon(endTransform, elbowAngles);

            for numBricks = 1:1
                qCurrent = self.robot2.model.getpos();
                plotTraj = jtraj(qCurrent, qEnd, numSteps);

                for i = 1:min(size(plotTraj, 1), numSteps)
                    self.robot2.model.animate(plotTraj(i, :));

                end

                qCurrent = self.robot2.model.getpos();
                endTransform = transl(endPosition2) * trotx(pi);
                elbowEndAngles = deg2rad([0, -40, 50, -60, -90, 0]);
                BrickEnd = self.robot2.model.ikcon(endTransform, elbowEndAngles);
                plotTrajEnd = jtraj(qCurrent, BrickEnd, numSteps);

                for i = 1:numSteps
                    currentTransform = self.robot2.model.fkine(plotTrajEnd(i, :)).T;
                    self.robot2.model.animate(plotTrajEnd(i, :));
                    pause(0.01);
                end
            end
        end 

          function beansCollider(self, endPosition, hold, robot1)

            Y = ones(8,10)
            Y = Y*-0.45
            z = 0:(1/12):0.75
            x = -2:0.1:-1.3
            [Z,X] = meshgrid(z,x)
            oneSideOfCube_h = surf(X,Y,Z);
            cubePoints = [X(:),Y(:),Z(:)];
     
            cubeAtOigin_h = plot3(cubePoints(:,1),cubePoints(:,2),cubePoints(:,3));
     
              q0 = transl(-1.4, -0.2, 1.29) * trotx(pi)
              q02 = transl(-0.5, 1.5, 1.2) * trotx(pi)
              q1 = self.robot1.model.ikcon(q0)
              %q1 = endPosition
              q2 = self.robot1.model.ikcon(q02)
              self.robot1.model.animate(q1);
              qWaypoints = [q1;q2];
              isCollision = true;
              checkedTillWaypoint = 1;
              qMatrix = [];
              while (isCollision)
                  startWaypoint = checkedTillWaypoint;
                  for i = startWaypoint:size(qWaypoints,1)-1
                      qMatrixJoin = InterpolateWaypointRadians(qWaypoints(i:i+1,:),deg2rad(10));
                      if ~IsCollision(robot1,qMatrixJoin,cubePoints)
                        qMatrix = [qMatrix; qMatrixJoin]; %#ok<AGROW>
                        self.robot1.animate(qMatrixJoin);
                        size(qMatrix)
                        isCollision = false;
                        checkedTillWaypoint = i+1;
                        % Now try and join to the final goal (q2)
                        qMatrixJoin = InterpolateWaypointRadians([qMatrix(end,:); q2],deg2rad(10));
                      if ~IsCollision(robot1,qMatrixJoin,cubePoints)
                        qMatrix = [qMatrix;qMatrixJoin];
                        % Reached goal without collision, so break out
                        break;
                      end
                      else
                        % Randomly pick a pose that is not in collision
                        qRand = (2 * rand(1,3) - 1) * pi;
                        while IsCollision(robot1,qRand,cubePoints)
                            qRand = (2 * rand(1,3) - 1) * pi;
                        end
                        qWaypoints =[ qWaypoints(1:i,:); qRand; qWaypoints(i+1:end,:)];
                        isCollision = true;
                        break;
                      end
                  end
            end
      self.robot1.animate(qMatrix)
      keyboard
          end
        %% IsCollision
        % This is based upon the output of questions 2.5 and 2.6
        % Given a robot model (robot), and trajectory (i.e. joint state vector) (qMatrix)
        % and triangle obstacles in the environment (faces,vertex,faceNormals)
        function result = IsCollision(robot1,qMatrix,cubePoints,returnOnceFound)
        if nargin < 6
            returnOnceFound = true;
        end
        result = false;
        
        for qIndex = 1:size(qMatrix,1)
            % Get the transform of every joint (i.e. start and end of every link)
            tr = GetLinkPoses(qMatrix(qIndex,:), robot1);
        
            % Go through each link and also each triangle face
            for i = 1 : size(tr,3)-1    
                for faceIndex = 1:size(faces,1)
                    vertOnPlane = vertex(faces(faceIndex,1)',:);
                    [intersectP,check] = LinePlaneIntersection(faceNormals(faceIndex,:),vertOnPlane,tr(1:3,4,i)',tr(1:3,4,i+1)'); 
                    if check == 1 && IsIntersectionPointInsideTriangle(intersectP,vertex(faces(faceIndex,:)',:))
                        plot3(intersectP(1),intersectP(2),intersectP(3),'g*');
                        display('Intersection');
                        result = true;
                        if returnOnceFound
                            return
                        end
                    end
                end    
            end
        end
        end

        %% InterpolateWaypointRadians
        % Given a set of waypoints, finely intepolate them
        function qMatrix = InterpolateWaypointRadians(waypointRadians,maxStepRadians)
        if nargin < 2
            maxStepRadians = deg2rad(1);
        end
        
        qMatrix = [];
        for i = 1: size(waypointRadians,1)-1
            qMatrix = [qMatrix ; FineInterpolation(waypointRadians(i,:),waypointRadians(i+1,:),maxStepRadians)]; %#ok<AGROW>
        end
        end
        %% GetLinkPoses
        % q - robot joint angles
        % robot -  seriallink robot model
        % transforms - list of transforms
        function [ transforms ] = GetLinkPoses(self, q, robot1)
        
        links = self.robot1.model.links;
        transforms = zeros(4, 4, length(links) + 1);
        transforms(:,:,1) = self.robot1.model.base;
        
        for i = 1:length(links)
            L = links(1,i);
            
            current_transform = transforms(:,:, i);
            
            current_transform = current_transform * trotz(q(1,i) + L.offset) * ...
            transl(0,0, L.d) * transl(L.a,0,0) * trotx(L.alpha);
            transforms(:,:,i + 1) = current_transform;
        end
        end

        %% FineInterpolation
        % Use results from Q2.6 to keep calling jtraj until all step sizes are
        % smaller than a given max steps size
        function qMatrix = FineInterpolation(q1,q2,maxStepRadians)
        if nargin < 3
            maxStepRadians = deg2rad(1);
        end
            
        steps = 2;
        while ~isempty(find(maxStepRadians < abs(diff(jtraj(q1,q2,steps))),1))
            steps = steps + 1;
        end
        qMatrix = jtraj(q1,q2,steps);
        end
    end
end


          