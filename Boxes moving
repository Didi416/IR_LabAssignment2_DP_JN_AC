classdef Lab2_AssignmentAngie < handle
    
    properties (Access = private)
        lab2GuiApp  % Instance of Lab2_GUI
    end
    
    properties (Constant)
        estopStatus = 'Run'; % Initialize to 'Run'
    end
    
    properties
        robot1 % Instance of the first robot
        robot2 % Instance of the second robot
    end
    
    %% Constructor
    methods
        function self = Lab2_AssignmentAngie
            clc
            clf
            % Create an instance of Lab2_GUI
            self.lab2GuiApp = Lab2_GUI();
            self.Environment_Lab2();
            self.initialiseRobots();
            input('Order has been confirmed');
            self.objectLocater();
        end
    end

    %% Public methods
    methods
        function startApp(self)
            % Start the Lab2_GUI app
            self.lab2GuiApp.UIFigure.Visible = 'on';
        end
    end
    
    %% E-stop
    methods (Static)
        % Method to toggle E-stop status
        function toggleEstop(estopStatus)
            % Toggle the E-stop status between 'Run' and 'Stop'
            if strcmp(estopStatus, 'Run')
                estopStatus = 'Run';
            else
                estopStatus = 'Stop';
            end
        end
    end
    
    %% Defined positions of Groceries
    methods
        function initialiseRobots(self)
            % Initialise robot instances
            self.robot1 = LinearUR10;
            self.robot2 = Robo;
        end

        function Environment_Lab2(self)
            surf([-2,-2; 2,2], [-2,2;-2,2], [0.0,0.0;0.0,0.0], ...
                'CData', imread('floor.jpg'), 'FaceColor', 'texturemap');
            hold on;
            %camlight

            surf([-2,-2;-2,-2], [-2,-2;2,2], [0.01,2.2;0.01,2.2], ...
                'CData', imrotate(imread('window1.jpg'), -90),'FaceColor','texturemap');
            hold on;
            %camlight

            surf([-2,-2;2,2],[2,2;2,2],[0.01,2.2;0.01,2.2], ...
                'CData', imrotate(imread('window2.jpg'), -90),'FaceColor','texturemap');
            hold on;
            %camlight

            axis ([-2 2 -2 2 0 2.2])
            grid on
            xlabel ('X');
            ylabel ('Y');
            zlabel ('Z');
            axis equal;

            % setting
            PlaceObject('kitchen2.ply', [-2.8, 5, 0.01]);

            % safety precautions
            PlaceObject('fireExtinguisher.ply', [1.1, 1.7, 0]);
            PlaceObject('emergencyStopButton.ply', [0.3, -0.3, 0.7]);
            hold on;
        end

        function objectLocater(self)
            % inital placements of boxes
            boxPos = zeros(12,3);
            boxes = cell(1,12);
            verticesArray = zeros(24,3,6);
            x = -1.4;
            i = 1;

            for y = -0.2:0.6:1.0
                for z = 0.2:0.28:0.48
                    boxes{i} = PlaceObject('box.ply');
                    vertices = get(boxes{i}, 'Vertices');
                    transformedVertices = [vertices,ones(size(vertices,1),1)] * transl(x,y,z)';
                    set(boxes{i}, 'Vertices', transformedVertices(:,1:3));
                    verticesArray(:,:,i) = vertices;
                    boxPos(i,1) = x;
                    boxPos(i,2) = y;
                    boxPos(i,3) = z;
                    i = i+1;
                end
                for z = 1.0:0.28:1.28
                    boxes{i} = PlaceObject('box.ply');
                    vertices = get(boxes{i}, 'Vertices');
                    transformedVertices = [vertices,ones(size(vertices,1),1)] * transl(x,y,z)';
                    set(boxes{i}, 'Vertices', transformedVertices(:,1:3));
                    verticesArray(:,:,i) = vertices;
                    boxPos(i,1) = x;
                    boxPos(i,2) = y;
                    boxPos(i,3) = z;
                    i = i+1;
                end
            end
            
            % This function defines positions and initiates robot movement
            
            box1 = [-1.4, -0.2, 1.29]; % top shelf
            box2 = [-1.4, 0.45, 1.29];
            box3 = [ -1.4, 1.0, 1.29];

            box4 = [-1.4, -0.2, 1.0];
            box5 = [-1.4, 0.45, 1.0];
            box6 = [-1.4, 1.0, 1.0];
      
            BoxPickUp = [box1, box2, box3, box4, box5, box6];

            %%
            % UR10 pick up positions from cupboards
            pickUps1 = [-1.4, -0.2, 1.29; 
                        -1.4, -0.2, 1.0;
                        -1.4, 1.0, 1.0;
                        -1.35, -0.2, 0.47;
                        -1.35, 1.0, 0.47;
                        -1.35, 0.45, 0.2];

            
            % UR10 drop positions to the robot 2 on table
            endPos1 = [-0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2;
                       -0.5, 1.5, 1.2];

            
            % Pick up positions from robot 1
            pickUps2 = [-0.5, 1.5, 0.8;
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8
                        -0.5, 1.5, 0.8];
               
            % End position to give to user 
            endPos2 = [0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9;
                       0.5, 1.0, 0.9];
          
            %% Moving robot 1 loop
            parfor i = 1:size(endPos1, 1)
                endPosition = endPos1(i, :);
                hold = boxPos(i, :);
                %self.robot1Rotato(endPosition, hold, self.robot1, boxes{i}, verticesArray(:,:,i));

                numSteps = 100;

                qCurrent = self.robot1.model.getpos();
                endTransform = transl(hold) * trotx(pi);
                elbowAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
                startPos = self.robot1.model.ikcon(endTransform, elbowAngles);
                plotTraj = jtraj(qCurrent, startPos, numSteps);

                for x = 1:min(size(plotTraj, 1), numSteps)
                    self.robot1.model.animate(plotTraj(x, :));
                    drawnow();
                end

                endTransform = transl(hold) * trotx(pi);
                elbowAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
                qEnd = self.robot1.model.ikcon(endTransform, elbowAngles);

                qCurrent = self.robot1.model.getpos();
                plotTraj = jtraj(qCurrent, qEnd, numSteps);
                
                for x = 1:min(size(plotTraj, 1), numSteps)
                    self.robot1.model.animate(plotTraj(x, :));
                end
                
                qCurrent = self.robot1.model.getpos();
                endTransform = transl(endPosition) * trotx(pi);
                elbowEndAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
                BrickEnd = self.robot1.model.ikcon(endTransform, elbowEndAngles);
                plotTrajEnd = jtraj(qCurrent, BrickEnd, numSteps);

                for x = 1:numSteps
                    currentTransform = self.robot1.model.fkine(plotTrajEnd(x, :)).T;
                    transformedVertices = [vertices,ones(size(vertices,1),1)] * currentTransform';
                    set(boxes{i}, 'Vertices', transformedVertices(:,1:3));

                    self.robot1.model.animate(plotTrajEnd(x, :));
                    pause(0.01);
                end
            end
            
            %% Moving robot 2 loop
            parfor i = 1:size(endPos2, 1)
                endPosition2 = endPos2(i,:);
                hold2 = pickUps2(i,:);
                self.robot2Rotato(endPosition2, hold2, self.robot2);
            end

            input('Press enter to end operation');
        end

        %% Function for movement of robot 1
        function robot1Rotato(self, endPosition, hold, robot1, boxes, vertices)
            
            numSteps = 100;
            
            endTransform = transl(hold) * trotx(pi);
            elbowAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
            qEnd = self.robot1.model.ikcon(endTransform, elbowAngles);

            for loop = 1:1
                qCurrent = self.robot1.model.getpos();
                plotTraj = jtraj(qCurrent, qEnd, numSteps);

                for i = 1:min(size(plotTraj, 1), numSteps)
                    self.robot1.model.animate(plotTraj(i, :));

                end

                qCurrent = self.robot1.model.getpos();
                endTransform = transl(endPosition) * trotx(pi);
                elbowEndAngles = deg2rad([0, 0, 45, 70, -35, 259, 0]);
                BrickEnd = self.robot1.model.ikcon(endTransform, elbowEndAngles);
                plotTrajEnd = jtraj(qCurrent, BrickEnd, numSteps);

                for i = 1:numSteps
                    currentTransform = self.robot1.model.fkine(plotTrajEnd(i, :)).T;
                    transformedVertices = [vertices,ones(size(vertices,1),1)] * currentTransform';
                    set(boxes{i}, 'Vertices', transformedVertices(:,1:3));

                    self.robot1.model.animate(plotTrajEnd(i, :));
                    pause(0.01);
                end
            end
        end

        %% Function for moving robot 2
        function robot2Rotato(self, endPosition2, hold2, robot2)

            numSteps = 100;
            
            endTransform = transl(hold2) * trotx(pi);
            elbowAngles = deg2rad([0, -40, 50, -60, -90, 0]);
            qEnd = self.robot2.model.ikcon(endTransform, elbowAngles);

            for numBricks = 1:1
                qCurrent = self.robot2.model.getpos();
                plotTraj = jtraj(qCurrent, qEnd, numSteps);

                for i = 1:min(size(plotTraj, 1), numSteps)
                    self.robot2.model.animate(plotTraj(i, :));

                end

                qCurrent = self.robot2.model.getpos();
                endTransform = transl(endPosition2) * trotx(pi);
                elbowEndAngles = deg2rad([0, -40, 50, -60, -90, 0]);
                BrickEnd = self.robot2.model.ikcon(endTransform, elbowEndAngles);
                plotTrajEnd = jtraj(qCurrent, BrickEnd, numSteps);

                for i = 1:numSteps
                    %input('E-stop is activated. Robot will not move.');
                    currentTransform = self.robot2.model.fkine(plotTrajEnd(i, :)).T;
                    self.robot2.model.animate(plotTrajEnd(i, :));
                    pause(0.01);
                end
            end
        end

    end
end


          
